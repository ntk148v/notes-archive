{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/docker-tips-tricks","result":{"data":{"brainNote":{"slug":"docker-tips-tricks","title":"Docker Tips Tricks","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Docker Tips Tricks\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Filtering: the filtering tag (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-f\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"--filter\"), \") format is of \\\"key=value\\\". If there is more than one filter, then pass multiple flags.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"dangling (boolean - true or false)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"label (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"label=<key>\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"label=<key>=<value>\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"before (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<image-name>[:<tag>]\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<image id>\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<image@digest>\"), \") - filter images created before given id or references\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"since (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<image-name>[:<tag>]\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<image id>\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<image@digest>\"), \") - filter images created since given id or references\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"reference (pattern of an image reference) - filter images whose reference matches the specified pattern\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ docker images --filter \\\"dangling=true\\\"\\n# Use to remove untagged images.\\n$ docker rmi $(docker images -f \\\"dangling=true\\\" -q)\\n# Use to remove images by tag/name\\n$ docker rmi $(docker images --filter=reference='busy*:*libc')\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"docker-compose mount:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"version: \\\"2.4\\\"\\nservices:\\n  foo:\\n    image: busybox\\n    container_name: foo\\n    volumes:\\n      - ./test:/app:cached # <source>:<dest>:<mode>\\n      - /app/test # create anonymous volume\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$docker-compose up -d\\n$ docker inspect foo\\n# result\\n        \\\"Mounts\\\": [\\n            {\\n                \\\"Type\\\": \\\"bind\\\",\\n                \\\"Source\\\": \\\"/tmp/test\\\",\\n                \\\"Destination\\\": \\\"/app\\\",\\n                \\\"Mode\\\": \\\"cached\\\",\\n                \\\"RW\\\": true,\\n                \\\"Propagation\\\": \\\"rprivate\\\"\\n            },\\n            {\\n                \\\"Type\\\": \\\"volume\\\",\\n                \\\"Name\\\": \\\"f0ae981babfff1d6c10feac120341d1c03eb0eda37c8162613ede97815acbdc8\\\",\\n                \\\"Source\\\": \\\"/var/lib/docker/volumes/f0ae981babfff1d6c10feac120341d1c03eb0eda37c8162613ede97815acbdc8/_data\\\",\\n                \\\"Destination\\\": \\\"/app/test\\\",\\n                \\\"Driver\\\": \\\"local\\\",\\n                \\\"Mode\\\": \\\"\\\",\\n                \\\"RW\\\": true,\\n                \\\"Propagation\\\": \\\"\\\"\\n            }\\n        ],\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"docker-compose compability\"), \": If set, Compose will attempt to convert keys in v3 files to their non-Swarm equivalent (DEPRECATED).\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"About these notes","slug":"about","childMdx":{"excerpt":"Hi, I'm  Kien Nguyen-Tuan  ðŸ‘‹. set.md.bak linux-recommended-software prometheus-alertmanager-silence bash-color-log escape-characters curlâ€¦"}}],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"@kiennt's notes"}}},"pageContext":{"slug":"docker-tips-tricks"}},"staticQueryHashes":[]}