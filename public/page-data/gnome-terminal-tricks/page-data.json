{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/gnome-terminal-tricks","result":{"data":{"brainNote":{"slug":"gnome-terminal-tricks","title":"Gnome terminal tricks","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Gnome terminal tricks\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Hide tab\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NOTE\"), \": It works for me with gnome-terminal 3.36.2\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Check allowed values:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ gsettings range org.gnome.Terminal.Legacy.Settings tab-policy\\nenum\\n'always'\\n'automatic'\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can enable 'never' value by changing \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/usr/share/glib-2.0/schemas/org.gnome.Terminal.gschema.xml\"), \":\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\"\n  }, \"--- /usr/share/glib-2.0/schemas/org.gnome.Terminal.gschema.xml  2018-12-25 13:45:29.000000000 -0800\\n+++ /tmp/org.gnome.Terminal.gschema.xml 2019-12-06 13:22:19.318272624 -0800\\n@@ -38,7 +38,7 @@\\n    <enum id='org.gnome.Terminal.TabsbarPolicy'>\\n     <value nick='always' value='0'/>\\n     <value nick='automatic' value='1'/>\\n-    <!-- <value nick='never' value='2'/> -->\\n+    <value nick='never' value='2'/>\\n   </enum>\\n\\n    <enum id='org.gnome.Terminal.ThemeVariant'>\\n@@ -727,7 +727,7 @@\\n     </key>\\n\\n     <key name=\\\"tab-policy\\\" enum=\\\"org.gnome.Terminal.TabsbarPolicy\\\">\\n-      <default>'automatic'</default>\\n+      <default>'never'</default>\\n       <summary>When to show the tabs bar</summary>\\n     </key>\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# Reload, you need sudo permission\\ncd /usr/share/glib-2.0/schemas\\nglib-compile-schemas .\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"After the change you should see 'never' as a possible value:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"\\n```$ gsettings range org.gnome.Terminal.Legacy.Settings tab-policy\\nenum\\n'always'\\n'automatic'\\n'never'\\n\\n- After restarting your gnome-terminal tabs can be turned off with:\\n\\n```bash\\n$ gsettings set org.gnome.Terminal.Legacy.Settings tab-policy 'never'\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Turn on with:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ gsettings set org.gnome.Terminal.Legacy.Settings tab-policy 'always'\\n\")), mdx(\"h2\", null, \"Create gnome-terminal application file\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gnome-terminal\"), \" is a command, you can create a desktop file for it, create file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/usr/local/share/applications/terminal.desktop\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"[Desktop Entry]\\nVersion=1.0\\nType=Application\\nName=Terminal\\nGenericName=Terminal emulator\\nComment=Gnome terminal\\nTryExec=gnome-terminal\\nExec=gnome-terminal\\nCategories=System;TerminalEmulator;\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"About these notes","slug":"about","childMdx":{"excerpt":"Hi, I'm  Kien Nguyen-Tuan  ðŸ‘‹. set.md.bak linux-recommended-software prometheus-alertmanager-silence bash-color-log escape-characters curlâ€¦"}}],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"@kiennt's notes"}}},"pageContext":{"slug":"gnome-terminal-tricks"}},"staticQueryHashes":[]}