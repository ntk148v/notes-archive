{"expireTime":9007200904488648000,"key":"gatsby-plugin-mdx-entire-payload-057d51d774d760f4e413bfaead612705-/notes","val":{"mdast":{"type":"root","children":[{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Filtering: the filtering tag (","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":33,"offset":33},"indent":[]}},{"type":"inlineCode","value":"-f","position":{"start":{"line":2,"column":33,"offset":33},"end":{"line":2,"column":37,"offset":37},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":2,"column":37,"offset":37},"end":{"line":2,"column":41,"offset":41},"indent":[]}},{"type":"inlineCode","value":"--filter","position":{"start":{"line":2,"column":41,"offset":41},"end":{"line":2,"column":51,"offset":51},"indent":[]}},{"type":"text","value":") format is of \"key=value\". If there is more than one filter, then pass multiple flags.","position":{"start":{"line":2,"column":51,"offset":51},"end":{"line":2,"column":138,"offset":138},"indent":[]}}],"position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":138,"offset":138},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"dangling (boolean - true or false)","position":{"start":{"line":3,"column":5,"offset":143},"end":{"line":3,"column":39,"offset":177},"indent":[]}}],"position":{"start":{"line":3,"column":5,"offset":143},"end":{"line":3,"column":39,"offset":177},"indent":[]}}],"position":{"start":{"line":3,"column":3,"offset":141},"end":{"line":3,"column":39,"offset":177},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"label (","position":{"start":{"line":4,"column":5,"offset":182},"end":{"line":4,"column":12,"offset":189},"indent":[]}},{"type":"inlineCode","value":"label=<key>","position":{"start":{"line":4,"column":12,"offset":189},"end":{"line":4,"column":25,"offset":202},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":4,"column":25,"offset":202},"end":{"line":4,"column":29,"offset":206},"indent":[]}},{"type":"inlineCode","value":"label=<key>=<value>","position":{"start":{"line":4,"column":29,"offset":206},"end":{"line":4,"column":50,"offset":227},"indent":[]}},{"type":"text","value":")","position":{"start":{"line":4,"column":50,"offset":227},"end":{"line":4,"column":51,"offset":228},"indent":[]}}],"position":{"start":{"line":4,"column":5,"offset":182},"end":{"line":4,"column":51,"offset":228},"indent":[]}}],"position":{"start":{"line":4,"column":3,"offset":180},"end":{"line":4,"column":51,"offset":228},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"before (","position":{"start":{"line":5,"column":5,"offset":233},"end":{"line":5,"column":13,"offset":241},"indent":[]}},{"type":"inlineCode","value":"<image-name>[:<tag>]","position":{"start":{"line":5,"column":13,"offset":241},"end":{"line":5,"column":35,"offset":263},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":5,"column":35,"offset":263},"end":{"line":5,"column":37,"offset":265},"indent":[]}},{"type":"inlineCode","value":"<image id>","position":{"start":{"line":5,"column":37,"offset":265},"end":{"line":5,"column":49,"offset":277},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":5,"column":49,"offset":277},"end":{"line":5,"column":53,"offset":281},"indent":[]}},{"type":"inlineCode","value":"<image@digest>","position":{"start":{"line":5,"column":53,"offset":281},"end":{"line":5,"column":69,"offset":297},"indent":[]}},{"type":"text","value":") - filter images created before given id or references","position":{"start":{"line":5,"column":69,"offset":297},"end":{"line":5,"column":124,"offset":352},"indent":[]}}],"position":{"start":{"line":5,"column":5,"offset":233},"end":{"line":5,"column":124,"offset":352},"indent":[]}}],"position":{"start":{"line":5,"column":3,"offset":231},"end":{"line":5,"column":124,"offset":352},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"since (","position":{"start":{"line":6,"column":5,"offset":357},"end":{"line":6,"column":12,"offset":364},"indent":[]}},{"type":"inlineCode","value":"<image-name>[:<tag>]","position":{"start":{"line":6,"column":12,"offset":364},"end":{"line":6,"column":34,"offset":386},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":6,"column":34,"offset":386},"end":{"line":6,"column":36,"offset":388},"indent":[]}},{"type":"inlineCode","value":"<image id>","position":{"start":{"line":6,"column":36,"offset":388},"end":{"line":6,"column":48,"offset":400},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":6,"column":48,"offset":400},"end":{"line":6,"column":52,"offset":404},"indent":[]}},{"type":"inlineCode","value":"<image@digest>","position":{"start":{"line":6,"column":52,"offset":404},"end":{"line":6,"column":68,"offset":420},"indent":[]}},{"type":"text","value":") - filter images created since given id or references","position":{"start":{"line":6,"column":68,"offset":420},"end":{"line":6,"column":122,"offset":474},"indent":[]}}],"position":{"start":{"line":6,"column":5,"offset":357},"end":{"line":6,"column":122,"offset":474},"indent":[]}}],"position":{"start":{"line":6,"column":3,"offset":355},"end":{"line":6,"column":122,"offset":474},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"reference (pattern of an image reference) - filter images whose reference matches the specified pattern","position":{"start":{"line":7,"column":5,"offset":479},"end":{"line":7,"column":108,"offset":582},"indent":[]}}],"position":{"start":{"line":7,"column":5,"offset":479},"end":{"line":7,"column":108,"offset":582},"indent":[]}}],"position":{"start":{"line":7,"column":3,"offset":477},"end":{"line":7,"column":108,"offset":582},"indent":[]}}],"position":{"start":{"line":3,"column":3,"offset":141},"end":{"line":7,"column":108,"offset":582},"indent":[3,3,3,3]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":7,"column":108,"offset":582},"indent":[1,1,1,1,1]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":7,"column":108,"offset":582},"indent":[1,1,1,1,1]}},{"type":"code","lang":"bash","meta":null,"value":"$ docker images --filter \"dangling=true\"\n# Use to remove untagged images.\n$ docker rmi $(docker images -f \"dangling=true\" -q)\n# Use to remove images by tag/name\n$ docker rmi $(docker images --filter=reference='busy*:*libc')","position":{"start":{"line":9,"column":1,"offset":584},"end":{"line":15,"column":4,"offset":819},"indent":[1,1,1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"docker-compose mount:","position":{"start":{"line":17,"column":3,"offset":823},"end":{"line":17,"column":24,"offset":844},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":823},"end":{"line":17,"column":24,"offset":844},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":821},"end":{"line":17,"column":24,"offset":844},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":821},"end":{"line":17,"column":24,"offset":844},"indent":[]}},{"type":"code","lang":"yaml","meta":null,"value":"version: \"2.4\"\nservices:\n  foo:\n    image: busybox\n    container_name: foo\n    volumes:\n      - ./test:/app:cached # <source>:<dest>:<mode>\n      - /app/test # create anonymous volume","position":{"start":{"line":19,"column":1,"offset":846},"end":{"line":28,"column":4,"offset":1041},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"bash","meta":null,"value":"$docker-compose up -d\n$ docker inspect foo\n# result\n        \"Mounts\": [\n            {\n                \"Type\": \"bind\",\n                \"Source\": \"/tmp/test\",\n                \"Destination\": \"/app\",\n                \"Mode\": \"cached\",\n                \"RW\": true,\n                \"Propagation\": \"rprivate\"\n            },\n            {\n                \"Type\": \"volume\",\n                \"Name\": \"f0ae981babfff1d6c10feac120341d1c03eb0eda37c8162613ede97815acbdc8\",\n                \"Source\": \"/var/lib/docker/volumes/f0ae981babfff1d6c10feac120341d1c03eb0eda37c8162613ede97815acbdc8/_data\",\n                \"Destination\": \"/app/test\",\n                \"Driver\": \"local\",\n                \"Mode\": \"\",\n                \"RW\": true,\n                \"Propagation\": \"\"\n            }\n        ],","position":{"start":{"line":30,"column":1,"offset":1043},"end":{"line":54,"column":4,"offset":1827},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"docker-compose compability","position":{"start":{"line":56,"column":3,"offset":1831},"end":{"line":56,"column":31,"offset":1859},"indent":[]}},{"type":"text","value":": If set, Compose will attempt to convert keys in v3 files to their non-Swarm equivalent (DEPRECATED).","position":{"start":{"line":56,"column":31,"offset":1859},"end":{"line":56,"column":133,"offset":1961},"indent":[]}}],"position":{"start":{"line":56,"column":3,"offset":1831},"end":{"line":56,"column":133,"offset":1961},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":1829},"end":{"line":56,"column":133,"offset":1961},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":1829},"end":{"line":56,"column":133,"offset":1961},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Docker Tips Tricks\"}","position":{"start":{"line":59,"column":1,"offset":1964},"end":{"line":59,"column":59,"offset":2022},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":59,"column":59,"offset":2022}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Docker Tips Tricks\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Filtering: the filtering tag (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-f\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"--filter\"), \") format is of \\\"key=value\\\". If there is more than one filter, then pass multiple flags.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"dangling (boolean - true or false)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"label (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"label=<key>\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"label=<key>=<value>\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"before (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<image-name>[:<tag>]\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<image id>\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<image@digest>\"), \") - filter images created before given id or references\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"since (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<image-name>[:<tag>]\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<image id>\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<image@digest>\"), \") - filter images created since given id or references\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"reference (pattern of an image reference) - filter images whose reference matches the specified pattern\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ docker images --filter \\\"dangling=true\\\"\\n# Use to remove untagged images.\\n$ docker rmi $(docker images -f \\\"dangling=true\\\" -q)\\n# Use to remove images by tag/name\\n$ docker rmi $(docker images --filter=reference='busy*:*libc')\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"docker-compose mount:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"version: \\\"2.4\\\"\\nservices:\\n  foo:\\n    image: busybox\\n    container_name: foo\\n    volumes:\\n      - ./test:/app:cached # <source>:<dest>:<mode>\\n      - /app/test # create anonymous volume\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$docker-compose up -d\\n$ docker inspect foo\\n# result\\n        \\\"Mounts\\\": [\\n            {\\n                \\\"Type\\\": \\\"bind\\\",\\n                \\\"Source\\\": \\\"/tmp/test\\\",\\n                \\\"Destination\\\": \\\"/app\\\",\\n                \\\"Mode\\\": \\\"cached\\\",\\n                \\\"RW\\\": true,\\n                \\\"Propagation\\\": \\\"rprivate\\\"\\n            },\\n            {\\n                \\\"Type\\\": \\\"volume\\\",\\n                \\\"Name\\\": \\\"f0ae981babfff1d6c10feac120341d1c03eb0eda37c8162613ede97815acbdc8\\\",\\n                \\\"Source\\\": \\\"/var/lib/docker/volumes/f0ae981babfff1d6c10feac120341d1c03eb0eda37c8162613ede97815acbdc8/_data\\\",\\n                \\\"Destination\\\": \\\"/app/test\\\",\\n                \\\"Driver\\\": \\\"local\\\",\\n                \\\"Mode\\\": \\\"\\\",\\n                \\\"RW\\\": true,\\n                \\\"Propagation\\\": \\\"\\\"\\n            }\\n        ],\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"docker-compose compability\"), \": If set, Compose will attempt to convert keys in v3 files to their non-Swarm equivalent (DEPRECATED).\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Docker Tips Tricks\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <ul>\n      <li parentName=\"ul\">{`Filtering: the filtering tag (`}<inlineCode parentName=\"li\">{`-f`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`--filter`}</inlineCode>{`) format is of \"key=value\". If there is more than one filter, then pass multiple flags.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`dangling (boolean - true or false)`}</li>\n          <li parentName=\"ul\">{`label (`}<inlineCode parentName=\"li\">{`label=<key>`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`label=<key>=<value>`}</inlineCode>{`)`}</li>\n          <li parentName=\"ul\">{`before (`}<inlineCode parentName=\"li\">{`<image-name>[:<tag>]`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`<image id>`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`<image@digest>`}</inlineCode>{`) - filter images created before given id or references`}</li>\n          <li parentName=\"ul\">{`since (`}<inlineCode parentName=\"li\">{`<image-name>[:<tag>]`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`<image id>`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`<image@digest>`}</inlineCode>{`) - filter images created since given id or references`}</li>\n          <li parentName=\"ul\">{`reference (pattern of an image reference) - filter images whose reference matches the specified pattern`}</li>\n        </ul>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ docker images --filter \"dangling=true\"\n# Use to remove untagged images.\n$ docker rmi $(docker images -f \"dangling=true\" -q)\n# Use to remove images by tag/name\n$ docker rmi $(docker images --filter=reference='busy*:*libc')\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`docker-compose mount:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`version: \"2.4\"\nservices:\n  foo:\n    image: busybox\n    container_name: foo\n    volumes:\n      - ./test:/app:cached # <source>:<dest>:<mode>\n      - /app/test # create anonymous volume\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$docker-compose up -d\n$ docker inspect foo\n# result\n        \"Mounts\": [\n            {\n                \"Type\": \"bind\",\n                \"Source\": \"/tmp/test\",\n                \"Destination\": \"/app\",\n                \"Mode\": \"cached\",\n                \"RW\": true,\n                \"Propagation\": \"rprivate\"\n            },\n            {\n                \"Type\": \"volume\",\n                \"Name\": \"f0ae981babfff1d6c10feac120341d1c03eb0eda37c8162613ede97815acbdc8\",\n                \"Source\": \"/var/lib/docker/volumes/f0ae981babfff1d6c10feac120341d1c03eb0eda37c8162613ede97815acbdc8/_data\",\n                \"Destination\": \"/app/test\",\n                \"Driver\": \"local\",\n                \"Mode\": \"\",\n                \"RW\": true,\n                \"Propagation\": \"\"\n            }\n        ],\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`docker-compose compability`}</inlineCode>{`: If set, Compose will attempt to convert keys in v3 files to their non-Swarm equivalent (DEPRECATED).`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}