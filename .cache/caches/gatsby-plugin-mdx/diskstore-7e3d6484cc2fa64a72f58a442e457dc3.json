{"expireTime":9007200904488648000,"key":"gatsby-plugin-mdx-entire-payload-3621f441db2daed94dd5686ba8be8548-/notes","val":{"mdast":{"type":"root","children":[{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Show the exactly timing messages while loading your config:","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":62,"offset":62},"indent":[]}}],"position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":62,"offset":62},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":62,"offset":62},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":62,"offset":62},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"vim --startuptime timeCost.txt timeCost.txt","position":{"start":{"line":4,"column":1,"offset":64},"end":{"line":6,"column":4,"offset":119},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Check file timeCost.txt and run ","position":{"start":{"line":8,"column":3,"offset":123},"end":{"line":8,"column":35,"offset":155},"indent":[]}},{"type":"inlineCode","value":":%! sort -k2 -nr","position":{"start":{"line":8,"column":35,"offset":155},"end":{"line":8,"column":53,"offset":173},"indent":[]}},{"type":"text","value":" to sort.","position":{"start":{"line":8,"column":53,"offset":173},"end":{"line":8,"column":62,"offset":182},"indent":[]}}],"position":{"start":{"line":8,"column":3,"offset":123},"end":{"line":8,"column":62,"offset":182},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":121},"end":{"line":8,"column":62,"offset":182},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":121},"end":{"line":8,"column":62,"offset":182},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"  --startuptime {fname}                                   --startuptime\n                  During startup write timing messages to the file {fname}.\n                  This can be used to find out where time is spent while loading\n                  your config, plugins and opening the first file.\n                  When {fname} already exists new messages are appended.","position":{"start":{"line":10,"column":1,"offset":184},"end":{"line":16,"column":5,"offset":561},"indent":[1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Profiling Vim startup time\"}","position":{"start":{"line":19,"column":1,"offset":564},"end":{"line":19,"column":67,"offset":630},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":19,"column":67,"offset":630}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Profiling Vim startup time\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Show the exactly timing messages while loading your config:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"vim --startuptime timeCost.txt timeCost.txt\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Check file timeCost.txt and run \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \":%! sort -k2 -nr\"), \" to sort.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"  --startuptime {fname}                                   --startuptime\\n                  During startup write timing messages to the file {fname}.\\n                  This can be used to find out where time is spent while loading\\n                  your config, plugins and opening the first file.\\n                  When {fname} already exists new messages are appended.\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Profiling Vim startup time\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <ul>\n      <li parentName=\"ul\">{`Show the exactly timing messages while loading your config:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vim --startuptime timeCost.txt timeCost.txt\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Check file timeCost.txt and run `}<inlineCode parentName=\"li\">{`:%! sort -k2 -nr`}</inlineCode>{` to sort.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`  --startuptime {fname}                                   --startuptime\n                  During startup write timing messages to the file {fname}.\n                  This can be used to find out where time is spent while loading\n                  your config, plugins and opening the first file.\n                  When {fname} already exists new messages are appended.\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}