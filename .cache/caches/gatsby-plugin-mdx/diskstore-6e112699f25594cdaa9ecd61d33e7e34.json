{"expireTime":9007200904488647000,"key":"gatsby-plugin-mdx-entire-payload-fcda7d19cda4b08a1d8b47cee29884c0-/notes","val":{"mdast":{"type":"root","children":[{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"How to grep lines which does not begin with “#” or “;”?","position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":59,"offset":59},"indent":[]}}],"position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":59,"offset":59},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":59,"offset":59},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":59,"offset":59},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"grep \"^[^#;]\" <file>","position":{"start":{"line":4,"column":1,"offset":61},"end":{"line":6,"column":4,"offset":93},"indent":[1,1]}},{"type":"list","ordered":true,"start":2,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Get the PID of current process","position":{"start":{"line":8,"column":4,"offset":98},"end":{"line":8,"column":34,"offset":128},"indent":[]}}],"position":{"start":{"line":8,"column":4,"offset":98},"end":{"line":8,"column":34,"offset":128},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":95},"end":{"line":8,"column":34,"offset":128},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":95},"end":{"line":8,"column":34,"offset":128},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"echo \"$$\"","position":{"start":{"line":10,"column":1,"offset":130},"end":{"line":12,"column":4,"offset":151},"indent":[1,1]}},{"type":"list","ordered":true,"start":3,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Get the return code of the last executed command","position":{"start":{"line":14,"column":4,"offset":156},"end":{"line":14,"column":52,"offset":204},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":156},"end":{"line":14,"column":52,"offset":204},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":153},"end":{"line":14,"column":52,"offset":204},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":153},"end":{"line":14,"column":52,"offset":204},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"echo \"$?\"","position":{"start":{"line":16,"column":1,"offset":206},"end":{"line":18,"column":4,"offset":227},"indent":[1,1]}},{"type":"list","ordered":true,"start":4,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Get the number of arguments in $*","position":{"start":{"line":20,"column":4,"offset":232},"end":{"line":20,"column":37,"offset":265},"indent":[]}}],"position":{"start":{"line":20,"column":4,"offset":232},"end":{"line":20,"column":37,"offset":265},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":229},"end":{"line":20,"column":37,"offset":265},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":229},"end":{"line":20,"column":37,"offset":265},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"echo \"?#\"","position":{"start":{"line":22,"column":1,"offset":267},"end":{"line":24,"column":4,"offset":288},"indent":[1,1]}},{"type":"list","ordered":true,"start":5,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Get the list of arguments passed to the current process","position":{"start":{"line":26,"column":4,"offset":293},"end":{"line":26,"column":59,"offset":348},"indent":[]}}],"position":{"start":{"line":26,"column":4,"offset":293},"end":{"line":26,"column":59,"offset":348},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":290},"end":{"line":26,"column":59,"offset":348},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":290},"end":{"line":26,"column":59,"offset":348},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"echo \"$*\"","position":{"start":{"line":28,"column":1,"offset":350},"end":{"line":30,"column":4,"offset":371},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Linux useful tricks\"}","position":{"start":{"line":33,"column":1,"offset":374},"end":{"line":33,"column":60,"offset":433},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":33,"column":60,"offset":433}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Linux useful tricks\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"How to grep lines which does not begin with \\u201C#\\u201D or \\u201C;\\u201D?\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"grep \\\"^[^#;]\\\" <file>\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Get the PID of current process\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"echo \\\"$$\\\"\\n\")), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Get the return code of the last executed command\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"echo \\\"$?\\\"\\n\")), mdx(\"ol\", {\n    \"start\": 4\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Get the number of arguments in $*\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"echo \\\"?#\\\"\\n\")), mdx(\"ol\", {\n    \"start\": 5\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Get the list of arguments passed to the current process\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"echo \\\"$*\\\"\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Linux useful tricks\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <ol>\n      <li parentName=\"ol\">{`How to grep lines which does not begin with “#” or “;”?`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`grep \"^[^#;]\" <file>\n`}</code></pre>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Get the PID of current process`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`echo \"$$\"\n`}</code></pre>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">{`Get the return code of the last executed command`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`echo \"$?\"\n`}</code></pre>\n    <ol {...{\n      \"start\": 4\n    }}>\n      <li parentName=\"ol\">{`Get the number of arguments in $*`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`echo \"?#\"\n`}</code></pre>\n    <ol {...{\n      \"start\": 5\n    }}>\n      <li parentName=\"ol\">{`Get the list of arguments passed to the current process`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`echo \"$*\"\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}