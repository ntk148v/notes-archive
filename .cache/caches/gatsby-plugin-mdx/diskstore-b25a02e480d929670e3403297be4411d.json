{"expireTime":9007200904488647000,"key":"gatsby-plugin-mdx-entire-payload-8a84e2a899db69b67794b50589af7c98-/notes","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Task","position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":8,"offset":8},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":8,"offset":8},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Display the current CPU utilization, as a percentage, calculated from ","position":{"start":{"line":4,"column":1,"offset":10},"end":{"line":4,"column":71,"offset":80},"indent":[]}},{"type":"inlineCode","value":"/proc/stat","position":{"start":{"line":4,"column":71,"offset":80},"end":{"line":4,"column":83,"offset":92},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":4,"column":83,"offset":92},"end":{"line":4,"column":84,"offset":93},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":10},"end":{"line":4,"column":84,"offset":93},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Solution","position":{"start":{"line":6,"column":4,"offset":98},"end":{"line":6,"column":12,"offset":106},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":95},"end":{"line":6,"column":12,"offset":106},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Most Linux kernels provide a virtual ","position":{"start":{"line":8,"column":1,"offset":108},"end":{"line":8,"column":38,"offset":145},"indent":[]}},{"type":"link","title":null,"url":"https://www.kernel.org/doc/Documentation/filesystems/proc.txt","children":[{"type":"text","value":"/proc","position":{"start":{"line":8,"column":39,"offset":146},"end":{"line":8,"column":44,"offset":151},"indent":[]}}],"position":{"start":{"line":8,"column":38,"offset":145},"end":{"line":8,"column":108,"offset":215},"indent":[]}},{"type":"text","value":" filesystem, providing an interface to various internal data structures.","position":{"start":{"line":8,"column":108,"offset":215},"end":{"line":8,"column":180,"offset":287},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":108},"end":{"line":8,"column":180,"offset":287},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"One of these internal structures (","position":{"start":{"line":10,"column":1,"offset":289},"end":{"line":10,"column":35,"offset":323},"indent":[]}},{"type":"inlineCode","value":"/proc/stat","position":{"start":{"line":10,"column":35,"offset":323},"end":{"line":10,"column":47,"offset":335},"indent":[]}},{"type":"text","value":") includes information on the amount of time (in ","position":{"start":{"line":10,"column":47,"offset":335},"end":{"line":10,"column":96,"offset":384},"indent":[]}},{"type":"inlineCode","value":"USER_HZ","position":{"start":{"line":10,"column":96,"offset":384},"end":{"line":10,"column":105,"offset":393},"indent":[]}},{"type":"text","value":") spent in various states. To determine the current level of CPU utilization from this information:","position":{"start":{"line":10,"column":105,"offset":393},"end":{"line":10,"column":204,"offset":492},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":289},"end":{"line":10,"column":204,"offset":492},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"read the 1st line of ","position":{"start":{"line":12,"column":4,"offset":497},"end":{"line":12,"column":25,"offset":518},"indent":[]}},{"type":"inlineCode","value":"/proc/stat","position":{"start":{"line":12,"column":25,"offset":518},"end":{"line":12,"column":37,"offset":530},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":497},"end":{"line":12,"column":37,"offset":530},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":494},"end":{"line":12,"column":37,"offset":530},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"discard the first word of that first line (","position":{"start":{"line":13,"column":4,"offset":534},"end":{"line":13,"column":47,"offset":577},"indent":[]}},{"type":"inlineCode","value":"cpu","position":{"start":{"line":13,"column":47,"offset":577},"end":{"line":13,"column":52,"offset":582},"indent":[]}},{"type":"text","value":")","position":{"start":{"line":13,"column":52,"offset":582},"end":{"line":13,"column":53,"offset":583},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":534},"end":{"line":13,"column":53,"offset":583},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":531},"end":{"line":13,"column":53,"offset":583},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"sum all of the times found on that first line to get the total time","position":{"start":{"line":14,"column":4,"offset":587},"end":{"line":14,"column":71,"offset":654},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":587},"end":{"line":14,"column":71,"offset":654},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":584},"end":{"line":14,"column":71,"offset":654},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"divide the 4th column (","position":{"start":{"line":15,"column":4,"offset":658},"end":{"line":15,"column":27,"offset":681},"indent":[]}},{"type":"inlineCode","value":"idle","position":{"start":{"line":15,"column":27,"offset":681},"end":{"line":15,"column":33,"offset":687},"indent":[]}},{"type":"text","value":") by the total time, to get the fraction of time spent being idle","position":{"start":{"line":15,"column":33,"offset":687},"end":{"line":15,"column":98,"offset":752},"indent":[]}}],"position":{"start":{"line":15,"column":4,"offset":658},"end":{"line":15,"column":98,"offset":752},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":655},"end":{"line":15,"column":98,"offset":752},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"subtract the previous fraction from 1.0 to get the time spent being not idle","position":{"start":{"line":16,"column":4,"offset":756},"end":{"line":16,"column":80,"offset":832},"indent":[]}}],"position":{"start":{"line":16,"column":4,"offset":756},"end":{"line":16,"column":80,"offset":832},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":753},"end":{"line":16,"column":80,"offset":832},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"multiple by 100 to get a percentage","position":{"start":{"line":17,"column":4,"offset":836},"end":{"line":17,"column":39,"offset":871},"indent":[]}}],"position":{"start":{"line":17,"column":4,"offset":836},"end":{"line":17,"column":39,"offset":871},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":833},"end":{"line":17,"column":39,"offset":871},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"To get a more real-time utilization, simple repeat the steps above with some small sleep interval in between.","position":{"start":{"line":18,"column":4,"offset":875},"end":{"line":18,"column":113,"offset":984},"indent":[]}}],"position":{"start":{"line":18,"column":4,"offset":875},"end":{"line":18,"column":113,"offset":984},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":872},"end":{"line":18,"column":113,"offset":984},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":494},"end":{"line":18,"column":113,"offset":984},"indent":[1,1,1,1,1,1]}},{"type":"code","lang":"bash","meta":null,"value":"# cat /proc/stat\ncpu  14786866 5251 3483876 75457666 367491 0 1796945 0 0 0\ncpu0 4877246 1597 844536 17736624 88425 0 598115 0 0 0\ncpu1 3054061 1076 890314 19490622 88362 0 566587 0 0 0\ncpu2 3273462 1090 872208 19277044 99891 0 402594 0 0 0\ncpu3 3582096 1488 876816 18953375 90812 0 229647 0 0 0\n# ...","position":{"start":{"line":20,"column":1,"offset":986},"end":{"line":28,"column":4,"offset":1299},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Source code","position":{"start":{"line":30,"column":4,"offset":1304},"end":{"line":30,"column":15,"offset":1315},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1301},"end":{"line":30,"column":15,"offset":1315},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/ntk148v/testing/tree/master/python/cpu_util.py","children":[{"type":"text","value":"Python","position":{"start":{"line":32,"column":5,"offset":1321},"end":{"line":32,"column":11,"offset":1327},"indent":[]}}],"position":{"start":{"line":32,"column":4,"offset":1320},"end":{"line":32,"column":79,"offset":1395},"indent":[]}}],"position":{"start":{"line":32,"column":4,"offset":1320},"end":{"line":32,"column":79,"offset":1395},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1317},"end":{"line":32,"column":79,"offset":1395},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/ntk148v/testing/tree/master/golang/cpu-util/main.go","children":[{"type":"text","value":"Golang","position":{"start":{"line":33,"column":5,"offset":1400},"end":{"line":33,"column":11,"offset":1406},"indent":[]}}],"position":{"start":{"line":33,"column":4,"offset":1399},"end":{"line":33,"column":84,"offset":1479},"indent":[]}}],"position":{"start":{"line":33,"column":4,"offset":1399},"end":{"line":33,"column":84,"offset":1479},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1396},"end":{"line":33,"column":84,"offset":1479},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1317},"end":{"line":33,"column":84,"offset":1479},"indent":[1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Linux CPU Utilization\"}","position":{"start":{"line":36,"column":1,"offset":1482},"end":{"line":36,"column":62,"offset":1543},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":36,"column":62,"offset":1543}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Linux CPU Utilization\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Task\"), mdx(\"p\", null, \"Display the current CPU utilization, as a percentage, calculated from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/proc/stat\"), \".\"), mdx(\"h2\", null, \"Solution\"), mdx(\"p\", null, \"Most Linux kernels provide a virtual \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.kernel.org/doc/Documentation/filesystems/proc.txt\"\n  }, \"/proc\"), \" filesystem, providing an interface to various internal data structures.\"), mdx(\"p\", null, \"One of these internal structures (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/proc/stat\"), \") includes information on the amount of time (in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"USER_HZ\"), \") spent in various states. To determine the current level of CPU utilization from this information:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"read the 1st line of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/proc/stat\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"discard the first word of that first line (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"cpu\"), \")\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"sum all of the times found on that first line to get the total time\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"divide the 4th column (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"idle\"), \") by the total time, to get the fraction of time spent being idle\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"subtract the previous fraction from 1.0 to get the time spent being not idle\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"multiple by 100 to get a percentage\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"To get a more real-time utilization, simple repeat the steps above with some small sleep interval in between.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# cat /proc/stat\\ncpu  14786866 5251 3483876 75457666 367491 0 1796945 0 0 0\\ncpu0 4877246 1597 844536 17736624 88425 0 598115 0 0 0\\ncpu1 3054061 1076 890314 19490622 88362 0 566587 0 0 0\\ncpu2 3273462 1090 872208 19277044 99891 0 402594 0 0 0\\ncpu3 3582096 1488 876816 18953375 90812 0 229647 0 0 0\\n# ...\\n\")), mdx(\"h2\", null, \"Source code\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/ntk148v/testing/tree/master/python/cpu_util.py\"\n  }, \"Python\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/ntk148v/testing/tree/master/golang/cpu-util/main.go\"\n  }, \"Golang\"))));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Linux CPU Utilization\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`Task`}</h2>\n    <p>{`Display the current CPU utilization, as a percentage, calculated from `}<inlineCode parentName=\"p\">{`/proc/stat`}</inlineCode>{`.`}</p>\n    <h2>{`Solution`}</h2>\n    <p>{`Most Linux kernels provide a virtual `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.kernel.org/doc/Documentation/filesystems/proc.txt\"\n      }}>{`/proc`}</a>{` filesystem, providing an interface to various internal data structures.`}</p>\n    <p>{`One of these internal structures (`}<inlineCode parentName=\"p\">{`/proc/stat`}</inlineCode>{`) includes information on the amount of time (in `}<inlineCode parentName=\"p\">{`USER_HZ`}</inlineCode>{`) spent in various states. To determine the current level of CPU utilization from this information:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`read the 1st line of `}<inlineCode parentName=\"li\">{`/proc/stat`}</inlineCode></li>\n      <li parentName=\"ol\">{`discard the first word of that first line (`}<inlineCode parentName=\"li\">{`cpu`}</inlineCode>{`)`}</li>\n      <li parentName=\"ol\">{`sum all of the times found on that first line to get the total time`}</li>\n      <li parentName=\"ol\">{`divide the 4th column (`}<inlineCode parentName=\"li\">{`idle`}</inlineCode>{`) by the total time, to get the fraction of time spent being idle`}</li>\n      <li parentName=\"ol\">{`subtract the previous fraction from 1.0 to get the time spent being not idle`}</li>\n      <li parentName=\"ol\">{`multiple by 100 to get a percentage`}</li>\n      <li parentName=\"ol\">{`To get a more real-time utilization, simple repeat the steps above with some small sleep interval in between.`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`# cat /proc/stat\ncpu  14786866 5251 3483876 75457666 367491 0 1796945 0 0 0\ncpu0 4877246 1597 844536 17736624 88425 0 598115 0 0 0\ncpu1 3054061 1076 890314 19490622 88362 0 566587 0 0 0\ncpu2 3273462 1090 872208 19277044 99891 0 402594 0 0 0\ncpu3 3582096 1488 876816 18953375 90812 0 229647 0 0 0\n# ...\n`}</code></pre>\n    <h2>{`Source code`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/ntk148v/testing/tree/master/python/cpu_util.py\"\n        }}>{`Python`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/ntk148v/testing/tree/master/golang/cpu-util/main.go\"\n        }}>{`Golang`}</a></li>\n    </ol>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}