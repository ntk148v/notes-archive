{"expireTime":9007200904488648000,"key":"gatsby-plugin-mdx-entire-payload-0490bbf32100f17d22ff5710eec0fa9f-/notes","val":{"mdast":{"type":"root","children":[{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Vim already has built-in key commands for insert mode to shift the current line left or right one ","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":101,"offset":101},"indent":[]}},{"type":"inlineCode","value":"&shiftwidth","position":{"start":{"line":2,"column":101,"offset":101},"end":{"line":2,"column":114,"offset":114},"indent":[]}},{"type":"text","value":". They are (in insert mode):","position":{"start":{"line":2,"column":114,"offset":114},"end":{"line":2,"column":142,"offset":142},"indent":[]}}],"position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":142,"offset":142},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"Ctrl-t","position":{"start":{"line":3,"column":7,"offset":149},"end":{"line":3,"column":15,"offset":157},"indent":[]}},{"type":"text","value":" : shift right (mnemonic \"tab\").","position":{"start":{"line":3,"column":15,"offset":157},"end":{"line":3,"column":47,"offset":189},"indent":[]}}],"position":{"start":{"line":3,"column":7,"offset":149},"end":{"line":3,"column":47,"offset":189},"indent":[]}}],"position":{"start":{"line":3,"column":3,"offset":145},"end":{"line":3,"column":47,"offset":189},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"Ctrl-d","position":{"start":{"line":4,"column":7,"offset":196},"end":{"line":4,"column":15,"offset":204},"indent":[]}},{"type":"text","value":" : shift left (mnemonic \"de-tab\").","position":{"start":{"line":4,"column":15,"offset":204},"end":{"line":4,"column":49,"offset":238},"indent":[]}}],"position":{"start":{"line":4,"column":7,"offset":196},"end":{"line":4,"column":49,"offset":238},"indent":[]}}],"position":{"start":{"line":4,"column":3,"offset":192},"end":{"line":4,"column":49,"offset":238},"indent":[]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Change to shift-tab and tab (just like VSCode):","position":{"start":{"line":5,"column":7,"offset":245},"end":{"line":5,"column":54,"offset":292},"indent":[]}}],"position":{"start":{"line":5,"column":7,"offset":245},"end":{"line":5,"column":54,"offset":292},"indent":[]}},{"type":"code","lang":"vim","meta":null,"value":"\" Remap shift left-right\n\" for command mode\nnnoremap <Tab> >>\nnnoremap <S-Tab> <<\n\n\" for insert mode\ninoremap <Tab> <C-t>\ninoremap <S-Tab> <C-d>","position":{"start":{"line":7,"column":5,"offset":298},"end":{"line":16,"column":8,"offset":485},"indent":[5,5,5,5,1,5,5,5,5]}}],"position":{"start":{"line":5,"column":3,"offset":241},"end":{"line":17,"column":5,"offset":490},"indent":[1,3,3,3,3,3,1,3,3,3,3,3]}}],"position":{"start":{"line":3,"column":3,"offset":145},"end":{"line":17,"column":5,"offset":490},"indent":[3,3,1,3,3,3,3,3,1,3,3,3,3,3]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":17,"column":5,"offset":490},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Map Ctrl-S to save file: ","position":{"start":{"line":18,"column":4,"offset":494},"end":{"line":18,"column":29,"offset":519},"indent":[]}},{"type":"link","title":null,"url":"https://vim.fandom.com/wiki/Map_Ctrl-S_to_save_current_or_new_files","children":[{"type":"text","value":"https://vim.fandom.com/wiki/Map_Ctrl-S_to_save_current_or_new_files","position":{"start":{"line":18,"column":30,"offset":520},"end":{"line":18,"column":97,"offset":587},"indent":[]}}],"position":{"start":{"line":18,"column":29,"offset":519},"end":{"line":18,"column":98,"offset":588},"indent":[]}}],"position":{"start":{"line":18,"column":4,"offset":494},"end":{"line":18,"column":98,"offset":588},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":491},"end":{"line":18,"column":98,"offset":588},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":18,"column":98,"offset":588},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Vim notes\"}","position":{"start":{"line":21,"column":1,"offset":591},"end":{"line":21,"column":50,"offset":640},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":21,"column":50,"offset":640}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Vim notes\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Vim already has built-in key commands for insert mode to shift the current line left or right one \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&shiftwidth\"), \". They are (in insert mode):\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Ctrl-t\"), \" : shift right (mnemonic \\\"tab\\\").\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Ctrl-d\"), \" : shift left (mnemonic \\\"de-tab\\\").\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Change to shift-tab and tab (just like VSCode):\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-vim\"\n  }, \"\\\" Remap shift left-right\\n\\\" for command mode\\nnnoremap <Tab> >>\\nnnoremap <S-Tab> <<\\n\\n\\\" for insert mode\\ninoremap <Tab> <C-t>\\ninoremap <S-Tab> <C-d>\\n\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Map Ctrl-S to save file: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://vim.fandom.com/wiki/Map_Ctrl-S_to_save_current_or_new_files\"\n  }, \"https://vim.fandom.com/wiki/Map_Ctrl-S_to_save_current_or_new_files\")))));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Vim notes\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Vim already has built-in key commands for insert mode to shift the current line left or right one `}<inlineCode parentName=\"p\">{`&shiftwidth`}</inlineCode>{`. They are (in insert mode):`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><inlineCode parentName=\"p\">{`Ctrl-t`}</inlineCode>{` : shift right (mnemonic \"tab\").`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><inlineCode parentName=\"p\">{`Ctrl-d`}</inlineCode>{` : shift left (mnemonic \"de-tab\").`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Change to shift-tab and tab (just like VSCode):`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-vim\"\n              }}>{`\" Remap shift left-right\n\" for command mode\nnnoremap <Tab> >>\nnnoremap <S-Tab> <<\n\n\" for insert mode\ninoremap <Tab> <C-t>\ninoremap <S-Tab> <C-d>\n`}</code></pre>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Map Ctrl-S to save file: `}<a parentName=\"p\" {...{\n            \"href\": \"https://vim.fandom.com/wiki/Map_Ctrl-S_to_save_current_or_new_files\"\n          }}>{`https://vim.fandom.com/wiki/Map_Ctrl-S_to_save_current_or_new_files`}</a></p>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}