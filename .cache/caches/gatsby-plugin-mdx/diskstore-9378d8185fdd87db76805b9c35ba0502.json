{"expireTime":9007200904488648000,"key":"gatsby-plugin-mdx-entire-payload-0663ba8601274ea129cbe3093f04d6ee-/notes","val":{"mdast":{"type":"root","children":[{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Rename a single file with ","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":29,"offset":29},"indent":[]}},{"type":"inlineCode","value":"mv","position":{"start":{"line":2,"column":29,"offset":29},"end":{"line":2,"column":33,"offset":33},"indent":[]}},{"type":"text","value":". Just a basic thing.","position":{"start":{"line":2,"column":33,"offset":33},"end":{"line":2,"column":54,"offset":54},"indent":[]}}],"position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":54,"offset":54},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":54,"offset":54},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Rename multiple files with ","position":{"start":{"line":3,"column":3,"offset":57},"end":{"line":3,"column":30,"offset":84},"indent":[]}},{"type":"inlineCode","value":"mv","position":{"start":{"line":3,"column":30,"offset":84},"end":{"line":3,"column":34,"offset":88},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":3,"column":34,"offset":88},"end":{"line":3,"column":35,"offset":89},"indent":[]}}],"position":{"start":{"line":3,"column":3,"offset":57},"end":{"line":3,"column":35,"offset":89},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":55},"end":{"line":3,"column":35,"offset":89},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":3,"column":35,"offset":89},"indent":[1]}},{"type":"code","lang":"bash","meta":null,"value":"# Rename files with suffix .yaml to yml\nfor f in *.yaml; do mv -- \"$f\" \"${f%.yaml}.yml\"","position":{"start":{"line":5,"column":1,"offset":91},"end":{"line":8,"column":4,"offset":190},"indent":[1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Rename multiple files with ","position":{"start":{"line":10,"column":3,"offset":194},"end":{"line":10,"column":30,"offset":221},"indent":[]}},{"type":"inlineCode","value":"rename","position":{"start":{"line":10,"column":30,"offset":221},"end":{"line":10,"column":38,"offset":229},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":10,"column":38,"offset":229},"end":{"line":10,"column":39,"offset":230},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":194},"end":{"line":10,"column":39,"offset":230},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":192},"end":{"line":10,"column":39,"offset":230},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":192},"end":{"line":10,"column":39,"offset":230},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"# Install rename command\n# Ubuntu/Debian-derived distros\nsudo apt install rename\n# RedHat-derived distros\nsudo yum install prename\n# The follow examples are performed in Ubuntu/Debian-derived distros\nrename 's/.yaml/.yml/' *.yaml\n# Replace all occurrences of \"prev_\" with \"next_\"\nrename 's/prev_/next_' *.c\n# Delete part of a filename\nrename 's/next_//' *.c\n# Limit changes to specific parts of filenames\n# Only change the files that start with \"paramater\"\nrename 's/^param/parameter/' *.c\n# Search with grouping\n# Replace all occurrences of \"string\" and \"strong\"\nrename 's/(str|stro)ng/strength' *.c\n# Use translations with rename\n# Force filenames to uppercase\nrename 'y/a-z/A-Z' *.py\n# More?\nman rename","position":{"start":{"line":12,"column":1,"offset":232},"end":{"line":35,"column":4,"offset":949},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Rename files in Linux\"}","position":{"start":{"line":38,"column":1,"offset":952},"end":{"line":38,"column":62,"offset":1013},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":38,"column":62,"offset":1013}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Rename files in Linux\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rename a single file with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"mv\"), \". Just a basic thing.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rename multiple files with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"mv\"), \".\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# Rename files with suffix .yaml to yml\\nfor f in *.yaml; do mv -- \\\"$f\\\" \\\"${f%.yaml}.yml\\\"\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rename multiple files with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"rename\"), \".\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# Install rename command\\n# Ubuntu/Debian-derived distros\\nsudo apt install rename\\n# RedHat-derived distros\\nsudo yum install prename\\n# The follow examples are performed in Ubuntu/Debian-derived distros\\nrename 's/.yaml/.yml/' *.yaml\\n# Replace all occurrences of \\\"prev_\\\" with \\\"next_\\\"\\nrename 's/prev_/next_' *.c\\n# Delete part of a filename\\nrename 's/next_//' *.c\\n# Limit changes to specific parts of filenames\\n# Only change the files that start with \\\"paramater\\\"\\nrename 's/^param/parameter/' *.c\\n# Search with grouping\\n# Replace all occurrences of \\\"string\\\" and \\\"strong\\\"\\nrename 's/(str|stro)ng/strength' *.c\\n# Use translations with rename\\n# Force filenames to uppercase\\nrename 'y/a-z/A-Z' *.py\\n# More?\\nman rename\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Rename files in Linux\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <ul>\n      <li parentName=\"ul\">{`Rename a single file with `}<inlineCode parentName=\"li\">{`mv`}</inlineCode>{`. Just a basic thing.`}</li>\n      <li parentName=\"ul\">{`Rename multiple files with `}<inlineCode parentName=\"li\">{`mv`}</inlineCode>{`.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`# Rename files with suffix .yaml to yml\nfor f in *.yaml; do mv -- \"$f\" \"\\${f%.yaml}.yml\"\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Rename multiple files with `}<inlineCode parentName=\"li\">{`rename`}</inlineCode>{`.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`# Install rename command\n# Ubuntu/Debian-derived distros\nsudo apt install rename\n# RedHat-derived distros\nsudo yum install prename\n# The follow examples are performed in Ubuntu/Debian-derived distros\nrename 's/.yaml/.yml/' *.yaml\n# Replace all occurrences of \"prev_\" with \"next_\"\nrename 's/prev_/next_' *.c\n# Delete part of a filename\nrename 's/next_//' *.c\n# Limit changes to specific parts of filenames\n# Only change the files that start with \"paramater\"\nrename 's/^param/parameter/' *.c\n# Search with grouping\n# Replace all occurrences of \"string\" and \"strong\"\nrename 's/(str|stro)ng/strength' *.c\n# Use translations with rename\n# Force filenames to uppercase\nrename 'y/a-z/A-Z' *.py\n# More?\nman rename\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}