{"expireTime":9007200904488647000,"key":"gatsby-plugin-mdx-entire-payload-1a8218d2dd61dbe65186cc6b1e844f59-/notes","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://spf13.com/post/go-pointers-vs-references/","children":[{"type":"text","value":"Source","position":{"start":{"line":2,"column":2,"offset":2},"end":{"line":2,"column":8,"offset":8},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":60,"offset":60},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":60,"offset":60},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"C, C++: pointers","position":{"start":{"line":4,"column":3,"offset":64},"end":{"line":4,"column":19,"offset":80},"indent":[]}}],"position":{"start":{"line":4,"column":3,"offset":64},"end":{"line":4,"column":19,"offset":80},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":62},"end":{"line":4,"column":19,"offset":80},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"C++, Java, Python, Perl & PHP: references","position":{"start":{"line":5,"column":3,"offset":83},"end":{"line":5,"column":44,"offset":124},"indent":[]}}],"position":{"start":{"line":5,"column":3,"offset":83},"end":{"line":5,"column":44,"offset":124},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":81},"end":{"line":5,"column":44,"offset":124},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"On the surface both references and pointers are very similar, both are used to have one variable provide access to another.","position":{"start":{"line":6,"column":3,"offset":127},"end":{"line":6,"column":126,"offset":250},"indent":[]}}],"position":{"start":{"line":6,"column":3,"offset":127},"end":{"line":6,"column":126,"offset":250},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":125},"end":{"line":6,"column":126,"offset":250},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":62},"end":{"line":6,"column":126,"offset":250},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"What is the difference?","position":{"start":{"line":8,"column":4,"offset":255},"end":{"line":8,"column":27,"offset":278},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":252},"end":{"line":8,"column":27,"offset":278},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A pointer is a variable which stores the address of another variable.","position":{"start":{"line":10,"column":1,"offset":280},"end":{"line":10,"column":70,"offset":349},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":280},"end":{"line":10,"column":70,"offset":349},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A reference is a variable which refers to another variable.","position":{"start":{"line":12,"column":1,"offset":351},"end":{"line":12,"column":60,"offset":410},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":351},"end":{"line":12,"column":60,"offset":410},"indent":[]}},{"type":"code","lang":"C++","meta":null,"value":"int i = 3; // define a variable\nint *ptr = &i; // define a pointer to that variable's memory address\nint &ref = i; // define a reference to the first variable\n\n// change the value of i to 13\n*ptr = 13;\nref = 13;","position":{"start":{"line":14,"column":1,"offset":412},"end":{"line":22,"column":4,"offset":634},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"What happens if I try to access the ptr directly without dereferencing first?\n-> Pointer can be reassigned while references cannot. In other words a pointer can be assigned to a different address.","position":{"start":{"line":24,"column":1,"offset":636},"end":{"line":25,"column":119,"offset":832},"indent":[1]}}],"position":{"start":{"line":24,"column":1,"offset":636},"end":{"line":25,"column":119,"offset":832},"indent":[1]}},{"type":"code","lang":"go","meta":null,"value":"package main\n\nimport \"fmt\"\n\nvar ap *int\n\nfunc main() {\n\ta := 1 // define int\n\tb := 2 // define int\n\n\tap = &a\n\tfmt.Println(ap)\n\tfmt.Println(*ap)\n\t// set ap to address of a (&a)\n\t//   ap address: 0x2101f1018\n\t//   ap value  : 1\n\n\t*ap = 3\n\tfmt.Println(ap)\n\tfmt.Println(*ap)\n\t// change the value at address &a to 3\n\t//   ap address: 0x2101f1018\n\t//   ap value  : 3\n\n\ta = 4\n\tfmt.Println(ap)\n\tfmt.Println(*ap)\n\t// change the value of a to 4\n\t//   ap address: 0x2101f1018\n\t//   ap value  : 4\n\n\tap = &b\n\tfmt.Println(ap)\n\tfmt.Println(*ap)\n\t// set ap to the address of b (&b)\n\t//   ap address: 0x2101f1020\n\t//   ap value  : 2\n\n\tap2 := ap\n\tfmt.Println(ap2)\n\tfmt.Println(*ap2)\n\t// set ap2 to the address in ap\n\t//   ap  address: 0x2101f1020\n\t//   ap  value  : 2\n\t//   ap2 address: 0x2101f1020\n\t//   ap2 value  : 2\n\n\t*ap = 5\n\tfmt.Println(ap)\n\tfmt.Println(*ap)\n\t// change the value at the address &b to 5\n\t//   ap  address: 0x2101f1020\n\t//   ap  value  : 5\n\t//   ap2 address: 0x2101f1020\n\t//   ap2 value  : 5\n\t// If this was a reference ap & ap2 would now\n\t// have different values\n\n\tap = &a\n\tfmt.Println(ap)\n\tfmt.Println(*ap)\n\t// change ap to address of a (&a)\n\t//   ap  address: 0x2101f1018\n\t//   ap  value  : 4\n\t//   ap2 address: 0x2101f1020\n\t//   ap2 value  : 5\n\t// Since we've changed the address of ap, it now\n\t// has a different value then ap2\n}","position":{"start":{"line":27,"column":1,"offset":834},"end":{"line":97,"column":4,"offset":2182},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = \"Golang Pointer vs References\"","position":{"start":{"line":100,"column":1,"offset":2185},"end":{"line":100,"column":59,"offset":2243},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":100,"column":59,"offset":2243}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = \"Golang Pointer vs References\";\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://spf13.com/post/go-pointers-vs-references/\"\n  }, \"Source\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"C, C++: pointers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"C++, Java, Python, Perl & PHP: references\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"On the surface both references and pointers are very similar, both are used to have one variable provide access to another.\")), mdx(\"h2\", null, \"What is the difference?\"), mdx(\"p\", null, \"A pointer is a variable which stores the address of another variable.\"), mdx(\"p\", null, \"A reference is a variable which refers to another variable.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-C++\"\n  }, \"int i = 3; // define a variable\\nint *ptr = &i; // define a pointer to that variable's memory address\\nint &ref = i; // define a reference to the first variable\\n\\n// change the value of i to 13\\n*ptr = 13;\\nref = 13;\\n\")), mdx(\"p\", null, \"What happens if I try to access the ptr directly without dereferencing first?\\n-> Pointer can be reassigned while references cannot. In other words a pointer can be assigned to a different address.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-go\"\n  }, \"package main\\n\\nimport \\\"fmt\\\"\\n\\nvar ap *int\\n\\nfunc main() {\\n    a := 1 // define int\\n    b := 2 // define int\\n\\n    ap = &a\\n    fmt.Println(ap)\\n    fmt.Println(*ap)\\n    // set ap to address of a (&a)\\n    //   ap address: 0x2101f1018\\n    //   ap value  : 1\\n\\n    *ap = 3\\n    fmt.Println(ap)\\n    fmt.Println(*ap)\\n    // change the value at address &a to 3\\n    //   ap address: 0x2101f1018\\n    //   ap value  : 3\\n\\n    a = 4\\n    fmt.Println(ap)\\n    fmt.Println(*ap)\\n    // change the value of a to 4\\n    //   ap address: 0x2101f1018\\n    //   ap value  : 4\\n\\n    ap = &b\\n    fmt.Println(ap)\\n    fmt.Println(*ap)\\n    // set ap to the address of b (&b)\\n    //   ap address: 0x2101f1020\\n    //   ap value  : 2\\n\\n    ap2 := ap\\n    fmt.Println(ap2)\\n    fmt.Println(*ap2)\\n    // set ap2 to the address in ap\\n    //   ap  address: 0x2101f1020\\n    //   ap  value  : 2\\n    //   ap2 address: 0x2101f1020\\n    //   ap2 value  : 2\\n\\n    *ap = 5\\n    fmt.Println(ap)\\n    fmt.Println(*ap)\\n    // change the value at the address &b to 5\\n    //   ap  address: 0x2101f1020\\n    //   ap  value  : 5\\n    //   ap2 address: 0x2101f1020\\n    //   ap2 value  : 5\\n    // If this was a reference ap & ap2 would now\\n    // have different values\\n\\n    ap = &a\\n    fmt.Println(ap)\\n    fmt.Println(*ap)\\n    // change ap to address of a (&a)\\n    //   ap  address: 0x2101f1018\\n    //   ap  value  : 4\\n    //   ap2 address: 0x2101f1020\\n    //   ap2 value  : 5\\n    // Since we've changed the address of ap, it now\\n    // has a different value then ap2\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = \"Golang Pointer vs References\";\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://spf13.com/post/go-pointers-vs-references/\"\n      }}>{`Source`}</a></p>\n    <ul>\n      <li parentName=\"ul\">{`C, C++: pointers`}</li>\n      <li parentName=\"ul\">{`C++, Java, Python, Perl & PHP: references`}</li>\n      <li parentName=\"ul\">{`On the surface both references and pointers are very similar, both are used to have one variable provide access to another.`}</li>\n    </ul>\n    <h2>{`What is the difference?`}</h2>\n    <p>{`A pointer is a variable which stores the address of another variable.`}</p>\n    <p>{`A reference is a variable which refers to another variable.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-C++\"\n      }}>{`int i = 3; // define a variable\nint *ptr = &i; // define a pointer to that variable's memory address\nint &ref = i; // define a reference to the first variable\n\n// change the value of i to 13\n*ptr = 13;\nref = 13;\n`}</code></pre>\n    <p>{`What happens if I try to access the ptr directly without dereferencing first?\n-> Pointer can be reassigned while references cannot. In other words a pointer can be assigned to a different address.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport \"fmt\"\n\nvar ap *int\n\nfunc main() {\n    a := 1 // define int\n    b := 2 // define int\n\n    ap = &a\n    fmt.Println(ap)\n    fmt.Println(*ap)\n    // set ap to address of a (&a)\n    //   ap address: 0x2101f1018\n    //   ap value  : 1\n\n    *ap = 3\n    fmt.Println(ap)\n    fmt.Println(*ap)\n    // change the value at address &a to 3\n    //   ap address: 0x2101f1018\n    //   ap value  : 3\n\n    a = 4\n    fmt.Println(ap)\n    fmt.Println(*ap)\n    // change the value of a to 4\n    //   ap address: 0x2101f1018\n    //   ap value  : 4\n\n    ap = &b\n    fmt.Println(ap)\n    fmt.Println(*ap)\n    // set ap to the address of b (&b)\n    //   ap address: 0x2101f1020\n    //   ap value  : 2\n\n    ap2 := ap\n    fmt.Println(ap2)\n    fmt.Println(*ap2)\n    // set ap2 to the address in ap\n    //   ap  address: 0x2101f1020\n    //   ap  value  : 2\n    //   ap2 address: 0x2101f1020\n    //   ap2 value  : 2\n\n    *ap = 5\n    fmt.Println(ap)\n    fmt.Println(*ap)\n    // change the value at the address &b to 5\n    //   ap  address: 0x2101f1020\n    //   ap  value  : 5\n    //   ap2 address: 0x2101f1020\n    //   ap2 value  : 5\n    // If this was a reference ap & ap2 would now\n    // have different values\n\n    ap = &a\n    fmt.Println(ap)\n    fmt.Println(*ap)\n    // change ap to address of a (&a)\n    //   ap  address: 0x2101f1018\n    //   ap  value  : 4\n    //   ap2 address: 0x2101f1020\n    //   ap2 value  : 5\n    // Since we've changed the address of ap, it now\n    // has a different value then ap2\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}