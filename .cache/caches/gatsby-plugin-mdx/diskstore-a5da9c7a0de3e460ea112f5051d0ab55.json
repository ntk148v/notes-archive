{"expireTime":9007200904488648000,"key":"gatsby-plugin-mdx-entire-payload-17a0820ea56fb311e2e55ca97e760f4e-/notes","val":{"mdast":{"type":"root","children":[{"type":"code","lang":null,"meta":null,"value":"    time_namelookup:  %{time_namelookup}s\\n\n       time_connect:  %{time_connect}s\\n\n    time_appconnect:  %{time_appconnect}s\\n\n   time_pretransfer:  %{time_pretransfer}s\\n\n      time_redirect:  %{time_redirect}s\\n\n time_starttransfer:  %{time_starttransfer}s\\n\n                    ----------\\n\n         time_total:  %{time_total}s\\n","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":11,"column":4,"offset":343},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"How to use:","position":{"start":{"line":13,"column":1,"offset":345},"end":{"line":13,"column":12,"offset":356},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":345},"end":{"line":13,"column":12,"offset":356},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"curl -w \"@curl-format.txt\" -s <http-url>","position":{"start":{"line":15,"column":1,"offset":358},"end":{"line":17,"column":4,"offset":410},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Curl response time format\"}","position":{"start":{"line":20,"column":1,"offset":413},"end":{"line":20,"column":66,"offset":478},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":20,"column":66,"offset":478}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Curl response time format\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"    time_namelookup:  %{time_namelookup}s\\\\n\\n       time_connect:  %{time_connect}s\\\\n\\n    time_appconnect:  %{time_appconnect}s\\\\n\\n   time_pretransfer:  %{time_pretransfer}s\\\\n\\n      time_redirect:  %{time_redirect}s\\\\n\\n time_starttransfer:  %{time_starttransfer}s\\\\n\\n                    ----------\\\\n\\n         time_total:  %{time_total}s\\\\n\\n\")), mdx(\"p\", null, \"How to use:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"curl -w \\\"@curl-format.txt\\\" -s <http-url>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Curl response time format\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <pre><code parentName=\"pre\" {...{}}>{`    time_namelookup:  %{time_namelookup}s\\\\n\n       time_connect:  %{time_connect}s\\\\n\n    time_appconnect:  %{time_appconnect}s\\\\n\n   time_pretransfer:  %{time_pretransfer}s\\\\n\n      time_redirect:  %{time_redirect}s\\\\n\n time_starttransfer:  %{time_starttransfer}s\\\\n\n                    ----------\\\\n\n         time_total:  %{time_total}s\\\\n\n`}</code></pre>\n    <p>{`How to use:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`curl -w \"@curl-format.txt\" -s <http-url>\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}