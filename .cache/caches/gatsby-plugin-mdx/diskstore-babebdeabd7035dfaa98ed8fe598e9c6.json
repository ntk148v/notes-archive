{"expireTime":9007200904488647000,"key":"gatsby-plugin-mdx-entire-payload-cdbdbf9d414b691e1f880134d5e7ffea-/notes","val":{"mdast":{"type":"root","children":[{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"GTK CSS doesn't support CSS variables. (CSS variables are relatively new.) GTK CSS has its own syntax for defining color variables, which predates the CSS variable syntax: ","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":175,"offset":175},"indent":[]}},{"type":"link","title":null,"url":"https://developer.gnome.org/gtk3/stable/chap-css-overview.html#id-1.5.2.3.8","children":[{"type":"text","value":"@define-color","position":{"start":{"line":2,"column":176,"offset":176},"end":{"line":2,"column":189,"offset":189},"indent":[]}}],"position":{"start":{"line":2,"column":175,"offset":175},"end":{"line":2,"column":267,"offset":267},"indent":[]}},{"type":"text","value":". Therefore, here is the trick to use generated colors in GTK css.","position":{"start":{"line":2,"column":267,"offset":267},"end":{"line":2,"column":333,"offset":333},"indent":[]}}],"position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":333,"offset":333},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":3,"column":1,"offset":334},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Create pywal template ","position":{"start":{"line":4,"column":3,"offset":337},"end":{"line":4,"column":25,"offset":359},"indent":[]}},{"type":"inlineCode","value":"~/.config/wal/templates/colors-gtk.css","position":{"start":{"line":4,"column":25,"offset":359},"end":{"line":4,"column":65,"offset":399},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":4,"column":65,"offset":399},"end":{"line":4,"column":66,"offset":400},"indent":[]}}],"position":{"start":{"line":4,"column":3,"offset":337},"end":{"line":4,"column":66,"offset":400},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":335},"end":{"line":4,"column":66,"offset":400},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":4,"column":66,"offset":400},"indent":[1,1]}},{"type":"code","lang":"css","meta":null,"value":"@define-color background {background};\n@define-color foreground {foreground};\n@define-color color0     {color0};\n@define-color color1     {color1};\n@define-color color2     {color2};\n@define-color color3     {color3};\n@define-color color4     {color4};\n@define-color color5     {color5};\n@define-color color6     {color6};\n@define-color color7     {color7};\n@define-color color8     {color8};\n@define-color color9     {color9};\n@define-color color10    {color10};\n@define-color color11    {color11};\n@define-color color12    {color12};\n@define-color color13    {color13};\n@define-color color14    {color14};\n@define-color color15    {color15};","position":{"start":{"line":6,"column":1,"offset":402},"end":{"line":25,"column":4,"offset":1056},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"After using ","position":{"start":{"line":27,"column":3,"offset":1060},"end":{"line":27,"column":15,"offset":1072},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/dylanaraps/pywal","children":[{"type":"text","value":"pywal","position":{"start":{"line":27,"column":16,"offset":1073},"end":{"line":27,"column":21,"offset":1078},"indent":[]}}],"position":{"start":{"line":27,"column":15,"offset":1072},"end":{"line":27,"column":59,"offset":1116},"indent":[]}},{"type":"text","value":" to generate theme, we will got this file ","position":{"start":{"line":27,"column":59,"offset":1116},"end":{"line":27,"column":101,"offset":1158},"indent":[]}},{"type":"inlineCode","value":"~/.cache/wal/colors-gtk.css","position":{"start":{"line":27,"column":101,"offset":1158},"end":{"line":27,"column":130,"offset":1187},"indent":[]}},{"type":"text","value":" (for example, the actual colors may be different, depend on your colorscheme):","position":{"start":{"line":27,"column":130,"offset":1187},"end":{"line":27,"column":209,"offset":1266},"indent":[]}}],"position":{"start":{"line":27,"column":3,"offset":1060},"end":{"line":27,"column":209,"offset":1266},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1058},"end":{"line":27,"column":209,"offset":1266},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1058},"end":{"line":27,"column":209,"offset":1266},"indent":[]}},{"type":"code","lang":"css","meta":null,"value":"@define-color background #1a1b26;\n@define-color foreground #c0caf5;\n@define-color color0     #15161E;\n@define-color color1     #f7768e;\n@define-color color2     #9ece6a;\n@define-color color3     #e0af68;\n@define-color color4     #7aa2f7;\n@define-color color5     #bb9af7;\n@define-color color6     #7dcfff;\n@define-color color7     #a9b1d6;\n@define-color color8     #414868;\n@define-color color9     #f7768e;\n@define-color color10    #9ece6a;\n@define-color color11    #e0af68;\n@define-color color12    #7aa2f7;\n@define-color color13    #bb9af7;\n@define-color color14    #7dcfff;\n@define-color color15    #c0caf5;","position":{"start":{"line":29,"column":1,"offset":1268},"end":{"line":48,"column":4,"offset":1890},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Create gtk.css file ","position":{"start":{"line":50,"column":3,"offset":1894},"end":{"line":50,"column":23,"offset":1914},"indent":[]}},{"type":"inlineCode","value":"~/.config/gtk3.0/gtk.css","position":{"start":{"line":50,"column":23,"offset":1914},"end":{"line":50,"column":49,"offset":1940},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":50,"column":49,"offset":1940},"end":{"line":50,"column":50,"offset":1941},"indent":[]}}],"position":{"start":{"line":50,"column":3,"offset":1894},"end":{"line":50,"column":50,"offset":1941},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":1892},"end":{"line":50,"column":50,"offset":1941},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":1892},"end":{"line":50,"column":50,"offset":1941},"indent":[]}},{"type":"code","lang":"css","meta":null,"value":"@import url('file:///home/<username>/.cache/wal/colors-gtk.css');\n\nvte-terminal {\n    padding: 30px;\n    background: @background;\n}","position":{"start":{"line":52,"column":1,"offset":1943},"end":{"line":59,"column":4,"offset":2085},"indent":[1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to import variables to gtk css file from another css file + Pywal template\"}","position":{"start":{"line":62,"column":1,"offset":2088},"end":{"line":62,"column":119,"offset":2206},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":62,"column":119,"offset":2206}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to import variables to gtk css file from another css file + Pywal template\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"GTK CSS doesn't support CSS variables. (CSS variables are relatively new.) GTK CSS has its own syntax for defining color variables, which predates the CSS variable syntax: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.gnome.org/gtk3/stable/chap-css-overview.html#id-1.5.2.3.8\"\n  }, \"@define-color\"), \". Therefore, here is the trick to use generated colors in GTK css.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Create pywal template \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~/.config/wal/templates/colors-gtk.css\"), \":\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \"@define-color background {background};\\n@define-color foreground {foreground};\\n@define-color color0     {color0};\\n@define-color color1     {color1};\\n@define-color color2     {color2};\\n@define-color color3     {color3};\\n@define-color color4     {color4};\\n@define-color color5     {color5};\\n@define-color color6     {color6};\\n@define-color color7     {color7};\\n@define-color color8     {color8};\\n@define-color color9     {color9};\\n@define-color color10    {color10};\\n@define-color color11    {color11};\\n@define-color color12    {color12};\\n@define-color color13    {color13};\\n@define-color color14    {color14};\\n@define-color color15    {color15};\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"After using \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/dylanaraps/pywal\"\n  }, \"pywal\"), \" to generate theme, we will got this file \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"~/.cache/wal/colors-gtk.css\"), \" (for example, the actual colors may be different, depend on your colorscheme):\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \"@define-color background #1a1b26;\\n@define-color foreground #c0caf5;\\n@define-color color0     #15161E;\\n@define-color color1     #f7768e;\\n@define-color color2     #9ece6a;\\n@define-color color3     #e0af68;\\n@define-color color4     #7aa2f7;\\n@define-color color5     #bb9af7;\\n@define-color color6     #7dcfff;\\n@define-color color7     #a9b1d6;\\n@define-color color8     #414868;\\n@define-color color9     #f7768e;\\n@define-color color10    #9ece6a;\\n@define-color color11    #e0af68;\\n@define-color color12    #7aa2f7;\\n@define-color color13    #bb9af7;\\n@define-color color14    #7dcfff;\\n@define-color color15    #c0caf5;\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create gtk.css file \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"~/.config/gtk3.0/gtk.css\"), \":\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \"@import url('file:///home/<username>/.cache/wal/colors-gtk.css');\\n\\nvte-terminal {\\n    padding: 30px;\\n    background: @background;\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to import variables to gtk css file from another css file + Pywal template\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`GTK CSS doesn't support CSS variables. (CSS variables are relatively new.) GTK CSS has its own syntax for defining color variables, which predates the CSS variable syntax: `}<a parentName=\"p\" {...{\n            \"href\": \"https://developer.gnome.org/gtk3/stable/chap-css-overview.html#id-1.5.2.3.8\"\n          }}>{`@define-color`}</a>{`. Therefore, here is the trick to use generated colors in GTK css.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Create pywal template `}<inlineCode parentName=\"p\">{`~/.config/wal/templates/colors-gtk.css`}</inlineCode>{`:`}</p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`@define-color background {background};\n@define-color foreground {foreground};\n@define-color color0     {color0};\n@define-color color1     {color1};\n@define-color color2     {color2};\n@define-color color3     {color3};\n@define-color color4     {color4};\n@define-color color5     {color5};\n@define-color color6     {color6};\n@define-color color7     {color7};\n@define-color color8     {color8};\n@define-color color9     {color9};\n@define-color color10    {color10};\n@define-color color11    {color11};\n@define-color color12    {color12};\n@define-color color13    {color13};\n@define-color color14    {color14};\n@define-color color15    {color15};\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`After using `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/dylanaraps/pywal\"\n        }}>{`pywal`}</a>{` to generate theme, we will got this file `}<inlineCode parentName=\"li\">{`~/.cache/wal/colors-gtk.css`}</inlineCode>{` (for example, the actual colors may be different, depend on your colorscheme):`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`@define-color background #1a1b26;\n@define-color foreground #c0caf5;\n@define-color color0     #15161E;\n@define-color color1     #f7768e;\n@define-color color2     #9ece6a;\n@define-color color3     #e0af68;\n@define-color color4     #7aa2f7;\n@define-color color5     #bb9af7;\n@define-color color6     #7dcfff;\n@define-color color7     #a9b1d6;\n@define-color color8     #414868;\n@define-color color9     #f7768e;\n@define-color color10    #9ece6a;\n@define-color color11    #e0af68;\n@define-color color12    #7aa2f7;\n@define-color color13    #bb9af7;\n@define-color color14    #7dcfff;\n@define-color color15    #c0caf5;\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Create gtk.css file `}<inlineCode parentName=\"li\">{`~/.config/gtk3.0/gtk.css`}</inlineCode>{`:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`@import url('file:///home/<username>/.cache/wal/colors-gtk.css');\n\nvte-terminal {\n    padding: 30px;\n    background: @background;\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}