{"expireTime":9007200904488648000,"key":"gatsby-plugin-mdx-entire-payload-686a2ec2febb7f81c7766e8d550fc929-/notes","val":{"mdast":{"type":"root","children":[{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Source:","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":10,"offset":10},"indent":[]}}],"position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":10,"offset":10},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":10,"offset":10},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":10,"offset":10},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"#!/bin/bash\n\n# tput colors\nBLACK=0\nRED=1\nGREEN=2\nBLUE=4\nWHITE=7\n\n# make text have cool color\nfunction log_info {\n  tput setaf $BLUE; echo -e $1\n}\n\nfunction log_success {\n  tput setaf $GREEN\n  echo -e \"✔ \" $1\n}\n\nfunction log_error {\n  tput setaf $RED\n  echo -e \"✘\" $1\n}","position":{"start":{"line":4,"column":1,"offset":12},"end":{"line":28,"column":4,"offset":292},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"How to use","position":{"start":{"line":30,"column":3,"offset":296},"end":{"line":30,"column":13,"offset":306},"indent":[]}}],"position":{"start":{"line":30,"column":3,"offset":296},"end":{"line":30,"column":13,"offset":306},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":294},"end":{"line":30,"column":13,"offset":306},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":294},"end":{"line":30,"column":13,"offset":306},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"source colorlog.sh\na_command && log_success \"OK\" || log_error \"Failed\"\n# for example:\ncat nonexistfile && log_success \"OK\" || log_error \"Failed\"\ncat existfile && log_success \"OK\" || log_error \"Failed\"","position":{"start":{"line":32,"column":1,"offset":308},"end":{"line":38,"column":4,"offset":520},"indent":[1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Color log\"}","position":{"start":{"line":41,"column":1,"offset":523},"end":{"line":41,"column":50,"offset":572},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":41,"column":50,"offset":572}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Color log\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Source:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"#!/bin/bash\\n\\n# tput colors\\nBLACK=0\\nRED=1\\nGREEN=2\\nBLUE=4\\nWHITE=7\\n\\n# make text have cool color\\nfunction log_info {\\n  tput setaf $BLUE; echo -e $1\\n}\\n\\nfunction log_success {\\n  tput setaf $GREEN\\n  echo -e \\\"\\u2714 \\\" $1\\n}\\n\\nfunction log_error {\\n  tput setaf $RED\\n  echo -e \\\"\\u2718\\\" $1\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How to use\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"source colorlog.sh\\na_command && log_success \\\"OK\\\" || log_error \\\"Failed\\\"\\n# for example:\\ncat nonexistfile && log_success \\\"OK\\\" || log_error \\\"Failed\\\"\\ncat existfile && log_success \\\"OK\\\" || log_error \\\"Failed\\\"\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Color log\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <ul>\n      <li parentName=\"ul\">{`Source:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`#!/bin/bash\n\n# tput colors\nBLACK=0\nRED=1\nGREEN=2\nBLUE=4\nWHITE=7\n\n# make text have cool color\nfunction log_info {\n  tput setaf $BLUE; echo -e $1\n}\n\nfunction log_success {\n  tput setaf $GREEN\n  echo -e \"✔ \" $1\n}\n\nfunction log_error {\n  tput setaf $RED\n  echo -e \"✘\" $1\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`How to use`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`source colorlog.sh\na_command && log_success \"OK\" || log_error \"Failed\"\n# for example:\ncat nonexistfile && log_success \"OK\" || log_error \"Failed\"\ncat existfile && log_success \"OK\" || log_error \"Failed\"\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}